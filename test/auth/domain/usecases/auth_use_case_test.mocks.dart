// Mocks generated by Mockito 5.4.6 from annotations
// in maingames_flutter_test/test/auth/domain/usecases/auth_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:maingames_flutter_test/core/failures/failures.dart' as _i5;
import 'package:maingames_flutter_test/core/model/base_response.dart' as _i8;
import 'package:maingames_flutter_test/src/features/auth/data/dtos/request/login_request_dto.dart'
    as _i7;
import 'package:maingames_flutter_test/src/features/auth/data/dtos/response/login_response_dto.dart'
    as _i6;
import 'package:maingames_flutter_test/src/features/auth/domain/repositories/auth_repo.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepo extends _i1.Mock implements _i3.AuthRepo {
  MockAuthRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseDto>> login(
          _i7.LoginRequestDto? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [param],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseDto>>.value(
                _FakeEither_0<_i5.Failure, _i6.LoginResponseDto>(
          this,
          Invocation.method(
            #login,
            [param],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponseDto>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, T>> handleNetwork<T>({
    required _i4.Future<_i2.Either<_i5.Failure, T>>? onRemote,
    _i4.Future<_i2.Either<_i5.Failure, T>>? onLocal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleNetwork,
          [],
          {
            #onRemote: onRemote,
            #onLocal: onLocal,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, T>>.value(
            _FakeEither_0<_i5.Failure, T>(
          this,
          Invocation.method(
            #handleNetwork,
            [],
            {
              #onRemote: onRemote,
              #onLocal: onLocal,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, T>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, TRepoModel>>
      handleServerErrors<TRepoModel, TDatasourceModel>({
    required _i4.Future<_i8.BaseResponse<TDatasourceModel?>>?
        datasourceResponse,
    TRepoModel Function(TDatasourceModel)? mapper,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #handleServerErrors,
              [],
              {
                #datasourceResponse: datasourceResponse,
                #mapper: mapper,
              },
            ),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, TRepoModel>>.value(
                _FakeEither_0<_i5.Failure, TRepoModel>(
              this,
              Invocation.method(
                #handleServerErrors,
                [],
                {
                  #datasourceResponse: datasourceResponse,
                  #mapper: mapper,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, TRepoModel>>);
}
