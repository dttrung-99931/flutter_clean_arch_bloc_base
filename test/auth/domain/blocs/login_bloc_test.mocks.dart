// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_base_app/test/auth/domain/blocs/login_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_base_app/core/failures/failures.dart' as _i5;
import 'package:flutter_base_app/features/auth/domain/entities/response/login_response.dart' as _i6;
import 'package:flutter_base_app/features/auth/domain/use_cases/login_usecase.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EmailLoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailLoginUseCase extends _i1.Mock implements _i3.EmailLoginUseCase {
  MockEmailLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponse>> call(_i3.LoginParams? loginParam) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [loginParam],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponse>>.value(_FakeEither_0<_i5.Failure, _i6.LoginResponse>(
          this,
          Invocation.method(
            #call,
            [loginParam],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponse>> onLoginSuccess(
    _i6.LoginResponse? response, {
    _i3.LoginParams? loginParam,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onLoginSuccess,
          [response],
          {#loginParam: loginParam},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponse>>.value(_FakeEither_0<_i5.Failure, _i6.LoginResponse>(
          this,
          Invocation.method(
            #onLoginSuccess,
            [response],
            {#loginParam: loginParam},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.LoginResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, TDto>> handleRepoResult<TDto, TModel>({
    required _i4.Future<_i2.Either<_i5.Failure, TModel>>? repoResult,
    _i4.Future<TDto> Function(TModel)? onSuccess,
    _i4.Future<_i2.Either<_i5.Failure, TDto>> Function(TModel)? nextRepoResult,
    _i4.Future<_i5.Failure> Function(_i5.Failure)? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleRepoResult,
          [],
          {
            #repoResult: repoResult,
            #onSuccess: onSuccess,
            #nextRepoResult: nextRepoResult,
            #onError: onError,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, TDto>>.value(_FakeEither_0<_i5.Failure, TDto>(
          this,
          Invocation.method(
            #handleRepoResult,
            [],
            {
              #repoResult: repoResult,
              #onSuccess: onSuccess,
              #nextRepoResult: nextRepoResult,
              #onError: onError,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, TDto>>);
}
